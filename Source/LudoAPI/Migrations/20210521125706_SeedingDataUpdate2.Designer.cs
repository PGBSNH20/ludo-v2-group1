// <auto-generated />
using LudoAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LudoAPI.Migrations
{
    [DbContext(typeof(LudoContext))]
    [Migration("20210521125706_SeedingDataUpdate2")]
    partial class SeedingDataUpdate2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LudoAPI.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoardName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlayerIDLastMadeMove")
                        .HasColumnType("int");

                    b.Property<string>("PlayerTurnName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Board");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoardName = "game1",
                            PlayerIDLastMadeMove = 0,
                            PlayerTurnName = "playerRed"
                        });
                });

            modelBuilder.Entity("LudoAPI.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Player");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoardId = 1,
                            Name = "playerRed"
                        },
                        new
                        {
                            Id = 2,
                            BoardId = 1,
                            Name = "playerBlue"
                        },
                        new
                        {
                            Id = 3,
                            BoardId = 1,
                            Name = "playerGreen"
                        },
                        new
                        {
                            Id = 4,
                            BoardId = 1,
                            Name = "playerYellow"
                        });
                });

            modelBuilder.Entity("LudoAPI.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("SquareID")
                        .HasColumnType("int");

                    b.Property<int>("Steps")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Token");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = 2,
                            IsActive = true,
                            PlayerId = 1,
                            SquareID = 1,
                            Steps = 1
                        },
                        new
                        {
                            Id = 2,
                            Color = 2,
                            IsActive = true,
                            PlayerId = 1,
                            SquareID = 1,
                            Steps = 1
                        },
                        new
                        {
                            Id = 3,
                            Color = 2,
                            IsActive = true,
                            PlayerId = 1,
                            SquareID = 17,
                            Steps = 17
                        },
                        new
                        {
                            Id = 4,
                            Color = 2,
                            IsActive = true,
                            PlayerId = 1,
                            SquareID = 18,
                            Steps = 18
                        },
                        new
                        {
                            Id = 5,
                            Color = 0,
                            IsActive = true,
                            PlayerId = 2,
                            SquareID = 50,
                            Steps = 11
                        },
                        new
                        {
                            Id = 6,
                            Color = 0,
                            IsActive = true,
                            PlayerId = 2,
                            SquareID = 12,
                            Steps = 25
                        },
                        new
                        {
                            Id = 7,
                            Color = 0,
                            IsActive = false,
                            PlayerId = 2,
                            SquareID = 0,
                            Steps = 0
                        },
                        new
                        {
                            Id = 8,
                            Color = 0,
                            IsActive = false,
                            PlayerId = 2,
                            SquareID = 0,
                            Steps = 0
                        },
                        new
                        {
                            Id = 9,
                            Color = 3,
                            IsActive = true,
                            PlayerId = 3,
                            SquareID = 13,
                            Steps = 0
                        },
                        new
                        {
                            Id = 10,
                            Color = 3,
                            IsActive = true,
                            PlayerId = 3,
                            SquareID = 14,
                            Steps = 1
                        },
                        new
                        {
                            Id = 11,
                            Color = 3,
                            IsActive = true,
                            PlayerId = 3,
                            SquareID = 15,
                            Steps = 2
                        },
                        new
                        {
                            Id = 12,
                            Color = 3,
                            IsActive = true,
                            PlayerId = 3,
                            SquareID = 16,
                            Steps = 3
                        },
                        new
                        {
                            Id = 13,
                            Color = 1,
                            IsActive = true,
                            PlayerId = 4,
                            SquareID = 301,
                            Steps = 51
                        },
                        new
                        {
                            Id = 14,
                            Color = 1,
                            IsActive = true,
                            PlayerId = 4,
                            SquareID = 302,
                            Steps = 52
                        },
                        new
                        {
                            Id = 15,
                            Color = 1,
                            IsActive = true,
                            PlayerId = 4,
                            SquareID = 303,
                            Steps = 53
                        },
                        new
                        {
                            Id = 16,
                            Color = 1,
                            IsActive = true,
                            PlayerId = 4,
                            SquareID = 304,
                            Steps = 54
                        });
                });

            modelBuilder.Entity("LudoAPI.Models.Player", b =>
                {
                    b.HasOne("LudoAPI.Models.Board", null)
                        .WithMany("Players")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LudoAPI.Models.Token", b =>
                {
                    b.HasOne("LudoAPI.Models.Player", null)
                        .WithMany("Tokens")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LudoAPI.Models.Board", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("LudoAPI.Models.Player", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
